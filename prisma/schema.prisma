generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  // User fileds
  email     String   @unique
  username  String   @unique
  password  String
  profile   Profile  @relation(fields: [profileId], references: [id])
  profileId String   @unique @db.ObjectId
}

model Profile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  // Profile fileds
  fullName  String
  gander    Gander   @default(male)
  picture   String?
  mobile    String
  country   String
  // Relation
  user      User?
}

model File {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt
  // File fileds
  fileName        String
  fileSizeKB      Int?
  renamedAt       DateTime?
  copiedAt        DateTime?
  editedAt        DateTime?
  changedAccessAt DateTime?
  // Relations
  directory       Directory @relation(fields: [directoryId], references: [id])
  directoryId     String    @unique @db.ObjectId
}

model Directory {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now()) @updatedAt
  // Directory fields
  directoryName   String
  directorySizeKB Int?
  renamedAt       DateTime?
  copiedAt        DateTime?
  editedAt        DateTime?
  changedAccessAt DateTime?
  // Relations
  file            File[]
  parentDir       Directory?  @relation("nestedDirChain", fields: [parentDirId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentDirId     String?     @unique @db.ObjectId
  childDir        Directory[] @relation("nestedDirChain")
}

enum Gander {
  male
  female
  others
}
